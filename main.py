from typing import TypedDict
from langgraph.graph import StateGraph, START, END

class State(TypedDict):
    firm_name: str
    role: str
    jd_file: str
    approval_gather: bool
    search_params: dict
    candidates_csv: str
    ranking_criteria: dict
    ranked_csv: str
    approval_message: bool
    num_people: int

def generate_jd(state: State):
    firm_name = state["firm_name"]
    role = state["role"]
    jd_content = f"Job Description for {role} at {firm_name}\nGenerated by Gemini model\nSkills: Event planning, Communication\nLocation: Remote"
    jd_file = f"{firm_name}_{role}.md"
    with open(jd_file, "w") as f:
        f.write(jd_content)
    return {"jd_file": jd_file}

def approval_gather(state: State):
    jd_file = state["jd_file"]
    with open(jd_file, "r") as f:
        jd_content = f.read()
    print("Job Description:")
    print(jd_content)
    approval = input("Do you approve the JD to proceed with gathering candidates? (yes/no): ")
    return {"approval_gather": approval.lower() == "yes"}

def input_search_params(state: State):
    keywords = input("Enter keywords for searching candidates (e.g., job title, skills): ")
    search_params = {"keywords": keywords}
    return {"search_params": search_params}

def gather_candidates(state: State):
    search_params = state["search_params"]
    candidates_csv = "candidates.csv"
    with open(candidates_csv, "w") as f:
        f.write("Name,Skills,Location\nJohn Doe,Event planning,Remote\nJane Smith,Communication,Remote")
    return {"candidates_csv": candidates_csv}

def input_ranking_criteria(state: State):
    skills = input("Required skills (comma-separated): ")
    location = input("Required location: ")
    experience = input("Required experience level (entry/mid/senior): ")
    certifications = input("Required certifications (comma-separated): ")
    ranking_criteria = {
        "skills": skills,
        "location": location,
        "experience": experience,
        "certifications": certifications
    }
    return {"ranking_criteria": ranking_criteria}

def rank_candidates(state: State):
    ranking_criteria = state["ranking_criteria"]
    candidates_csv = state["candidates_csv"]
    ranked_csv = "ranked_candidates.csv"
    with open(ranked_csv, "w") as f:
        f.write("Name,Score\nJohn Doe,90\nJane Smith,85")
    return {"ranked_csv": ranked_csv}

def approval_message(state: State):
    approval = input("Do you approve messaging the top candidates? (yes/no): ")
    return {"approval_message": approval.lower() == "yes"}

def input_num_people(state: State):
    num_people = int(input("Enter the number of top candidates to message: "))
    return {"num_people": num_people}

def message_candidates(state: State):
    ranked_csv = state["ranked_csv"]
    num_people = state["num_people"]
    print(f"Messaging top {num_people} candidates from {ranked_csv}")
    return {}

def route_after_approval_gather(state: State):
    if state["approval_gather"]:
        return "input_search_params"
    return "END"

def route_after_approval_message(state: State):
    if state["approval_message"]:
        return "input_num_people"
    return "END"

graph_builder = StateGraph(State)
graph_builder.add_node("generate_jd", generate_jd)
graph_builder.add_node("approval_gather", approval_gather)
graph_builder.add_node("input_search_params", input_search_params)
graph_builder.add_node("gather_candidates", gather_candidates)
graph_builder.add_node("input_ranking_criteria", input_ranking_criteria)
graph_builder.add_node("rank_candidates", rank_candidates)
graph_builder.add_node("approval_message", approval_message)
graph_builder.add_node("input_num_people", input_num_people)
graph_builder.add_node("message_candidates", message_candidates)

graph_builder.add_edge(START, "generate_jd")
graph_builder.add_edge("generate_jd", "approval_gather")
graph_builder.add_conditional_edges("approval_gather", route_after_approval_gather, {"input_search_params": "input_search_params", "END": END})
graph_builder.add_edge("input_search_params", "gather_candidates")
graph_builder.add_edge("gather_candidates", "input_ranking_criteria")
graph_builder.add_edge("input_ranking_criteria", "rank_candidates")
graph_builder.add_edge("rank_candidates", "approval_message")
graph_builder.add_conditional_edges("approval_message", route_after_approval_message, {"input_num_people": "input_num_people", "END": END})
graph_builder.add_edge("input_num_people", "message_candidates")
graph_builder.add_edge("message_candidates", END)

graph = graph_builder.compile()

def main():
    firm_name = input("Enter the company name: ")
    role = input("Enter the job role: ")
    initial_state = {
        "firm_name": firm_name,
        "role": role,
        "jd_file": "",
        "approval_gather": False,
        "search_params": {},
        "candidates_csv": "",
        "ranking_criteria": {},
        "ranked_csv": "",
        "approval_message": False,
        "num_people": 0
    }
    result = graph.invoke(initial_state)
    print("Workflow completed.")

if __name__ == "__main__":
    main()
